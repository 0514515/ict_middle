<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="FormRepository">


	
	<!-- approval id로 해당하는 approval 정보 불러오기 -->
	<select id="getApprovalById" parameterType="int" resultType="Approval">
		SELECT *
		FROM APPROVAL
		WHERE id=#{id}
	</select>

	<!-- approval id로 해당하는 approvalLine (type = 1)인 정보만 불러오기  -->
	<select id="getApprovalLineById" parameterType="int" resultType="ApprovalLine">
		SELECT al.*, d.NAME departmentName, s.NAME staffName, s."RANK" staffRank 
		FROM APPROVAL_LINE al INNER JOIN STAFF s
		ON al.staff_id = s.id
		INNER JOIN DEPARTMENT d 
		ON d.ID =s.DEPARTMENT_ID 
		WHERE al.ID in (
				SELECT al.ID
				FROM APPROVAL_LINE al
				WHERE TYPE=1 AND APPROVAL_ID=#{approvalId})
	</select>

	<insert id="saveApproval" parameterType="Approval">
		INSERT INTO APPROVAL(
			ID, DOCUMENT_AT, STATUS, TITLE, CURRENT_SIGNING_STAFF, 
			DOCUMENT_NUMBER, STAFF_ID, COMPANY_ID, FORM_TITLE
			)
		VALUES (
			SEQ_DOCUMENT_FORM_ID.nextval, #{documentAt}, #{status}, #{title}, #{currentSigningStaff}, 
			SEQ_APPROVAL_DOCUMENT_NUMBER.nextval, #{staffId}, #{companyId}, #{formTitle})
			
			<selectKey keyProperty="id" resultType="int" order="AFTER">
				SELECT SEQ_DOCUMENT_FORM_ID.currval FROM DUAL
			</selectKey>
	
	</insert>
	
	<!-- approvalLine 저장, 배열 여러개 입력하는 방식이라 foreach는 A로 감싸주고 시퀀스는 따로 빼서 PK(시퀀스id) 중복되지 않도록 처리  -->
	<insert id="saveApprovalLine" parameterType="java.util.List">
		INSERT INTO APPROVAL_LINE(ID, APPROVAL_ID, "TYPE" , SIGNED ,SIGNED_AT , PRIORITY, STAFF_ID)
		SELECT SEQ_APPROVAL_LINE_ID.nextval, A.* FROM (
			<foreach collection="list" item="line" separator="UNION ALL ">
				SELECT 
				#{line.approvalId}, #{line.type}, #{line.signed}, 
				<if test="line.signedAt == null">
                    NULL
                </if>
                <if test="line.signedAt != null">
                    #{line.signedAt}
                </if>,
                #{line.priority}, #{line.staffId}
				FROM DUAL   
			</foreach>
		) A
		
	</insert>
	
	<update id="updateApprovalCurrentSigningStaff" parameterType="Approval">
		UPDATE approval
		SET current_signing_staff = #{currentSigningStaff}
		WHERE ID=#{id}
	</update>


<!-- 회사 트리구조 -->

	<!-- 객체 매핑용 -->
	<resultMap id="selectCompanyTree" type="RootCompany">
		<!-- company -->
		<id property="id" column="company_id" />
		<result property="name" column="company_name" />
		
		<!-- department -->
		<collection property="departments" ofType="Department">
			<id property="id" column="department_id" />
			<result property="name" column="department_name" />
			<result property="companyId" column="department_company_id" />

			<!-- staff -->
			<collection property="staffs" ofType="Staff">
				<id property="staffId" column="staff_id" />
				<result property="staffName" column="staff_name" />
				<result property="departmentId" column="staff_department_id" />
				<result property="rank" column="rank" />
			</collection>
		</collection>
	</resultMap>
	
	<!-- 회사 조직 트리구조 데이터 조회용 -->
	<select id="selectCompanyTreeDataById" resultMap="selectCompanyTree">
		SELECT
			c.id company_id,
			c.name company_name,
			d.id department_id,
			d.name department_name,
			d.company_id department_company_id,
			s.id staff_id,
			s.department_id staff_department_id,
			s.name staff_name,
			s.rank rank   <!-- 이 부분 추가 --> 
		FROM 
			company c
			INNER JOIN department d ON
			c.id = d.company_id
			INNER JOIN staff s ON
			d.id = s.department_id
		WHERE
			c.id = (
					SELECT s.company_id
					FROM Staff s
					WHERE login_id=#{login_id}
					)
	</select>

<!-- 회사 트리구조 끝 -->


	<!-- 로그인 아이디로 스태프 이름, 사원id, 부서, 직급 조회 -->
	<select id="getStaffByLoginId" parameterType="String" resultType="StaffInfo">
		SELECT s.ID AS id, s.NAME AS name, s."RANK" AS "rank", d.NAME AS departmentName 
		FROM staff s INNER JOIN department d
		ON s.department_id = d.id	
		WHERE login_id = #{loginId}
	</select>


	<!-- db에 폼 양식 입력하기 -->
	<insert id="insertForm" parameterType="Forms">

		INSERT INTO DOCUMENT_FORM (
		ID, PATH, TITLE, CREATED_AT, UPDATED_AT,
		DOCUMENT_TYPE, COMPANY_ID, STAFF_ID
		)
		VALUES (
		SEQ_DOCUMENT_FORM_ID.nextval, #{path}, #{title}, sysdate, sysdate,
		#{documentType},#{companyId},#{staffId})
		<!-- #{ } 사용시 vo(Forms.java) 와 이름 동일하게 쓰기 -->

	</insert>

	<!-- 목록 불러오기 -->
	<!-- <select id="getFormList" resultType="Forms"> SELECT DOC.ID ID, DOC.PATH 
		PATH, DOC.TITLE TITLE, DOC.CREATED_AT CREATEDAT, DOC.UPDATED_AT UPDATEDAT, 
		DOC.DOCUMENT_TYPE DOCUMENTTYPE, DOC.COMPANY_ID COMPANYID, s.NAME NAME FROM 
		DOCUMENT_FORM DOC INNER JOIN STAFF s ON DOC.STAFF_ID = s.ID ORDER BY DOC.ID 
		DESC </select> -->

	<!-- 양식 불러오기 -->
	<select id="getApprovalForm" resultType="Forms"> 
		SELECT * 
	    FROM DOCUMENT_FORM
	</select>

	<!-- 폼 목록 조회 -->
	<select id="getFormList" parameterType="String" resultType="Forms">
		SELECT DOC.ID ID, DOC.PATH PATH, DOC.TITLE TITLE, DOC.CREATED_AT
		CREATEDAT,
		DOC.UPDATED_AT UPDATEDAT, DOC.DOCUMENT_TYPE DOCUMENTTYPE,
		DOC.COMPANY_ID COMPANYID, s.NAME NAME
		FROM DOCUMENT_FORM DOC
		INNER JOIN
		STAFF s
		ON DOC.STAFF_ID = s.ID
		<where>
			s.company_id = (SELECT s.company_id
			FROM staff s
			WHERE
			s.login_id=#{loginId})
			<if test="searchOption != null and searchOption != ''">
				<choose>
					<when test="searchOption == 'title'">
						AND DOC.title LIKE '%' || #{searchKeyword} || '%'
					</when>
					<when test="searchOption == 'staffId'">
						AND s.name LIKE '%' || #{searchKeyword} || '%'
					</when>
				</choose>

			</if>
			<if test="documentType != null">
				<choose>
					<when test="documentType == '인사 문서'">
						AND doc.DOCUMENT_TYPE = '인사 문서'
					</when>
					<when test="documentType == '기안 문서'">
						AND doc.DOCUMENT_TYPE = '기안 문서'
					</when>
				</choose>
			</if>
		</where>
		ORDER BY DOC.ID DESC
	</select>





	<!-- 페이지네이션용 페이지 수 조회 () -->
	<select id="selectFormCount" resultType="int">
		SELECT COUNT(*)
		FROM document_form doc
		INNER JOIN staff s ON
		doc.staff_id = s.id
		<where>
			s.company_id = (SELECT s.company_id
			FROM staff s
			WHERE
			s.login_id=#{loginId})
			<if test="searchOption != null and searchOption != ''">
				<choose>
					<when test="searchOption == 'title'">
						AND doc.title LIKE '%' || #{searchKeyword} || '%'
					</when>
					<when test="searchOption == 'staffId'">
						AND s.name LIKE '%' || #{searchKeyword} || '%'
					</when>
				</choose>
			</if>
		</where>
	</select>


	<!-- 목록에서 삭제하기 -->
	<delete id="deleteForm" parameterType="java.util.List">
		DELETE FROM DOCUMENT_FORM
		WHERE ID IN
		<foreach collection="list" item="formIds" open="("
			separator="," close=")">
			#{formIds}
		</foreach>

	</delete>

	<!-- 수정하기 -->
	<update id="updateForm" parameterType="Forms">
		UPDATE DOCUMENT_FORM
		SET
		PATH=#{path}, TITLE=#{title}, UPDATED_AT=SYSDATE,
		DOCUMENT_TYPE=#{documentType}, COMPANY_ID=#{companyId},
		STAFF_ID=#{staffId}
		WHERE ID = #{id}
	</update>


	<!-- 최근에 만들어진 폼의 id값 불러오기 -->
	<select id="getRecentFormId" parameterType="String"
		resultType="int">
		SELECT MAX(id)
		FROM document_form
		WHERE company_id = (SELECT
		company_id FROM STAFF
		WHERE login_id = #{loginId})
	</select>

	<!-- id에 해당하는 form 정보 불러오기 -->
	<select id="getFormById" parameterType="int" resultType="Forms">  <!-- 파라미터로 int id 값을 받아 입력하고 Forms에 담아 돌려 보내기 -->
		SELECT *
		FROM DOCUMENT_FORM
		WHERE id=#{id}
	</select>

	<!-- 폼id 값으로 경로 받아오기 -->
	<select id="selectPathsByIds" parameterType="java.util.List"
		resultType="String">
		SELECT PATH
		FROM DOCUMENT_FORM
		WHERE ID IN
		<foreach collection="list" item="formIds" open="("
			separator="," close=")">
			#{formIds}
		</foreach>
	</select>
	

</mapper>