<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="AttendanceRepository">
    <!-- resultMap 정의 -->

	<!-- 오늘 날짜 기준 "출근"데이터 유무 확인 -->
	<select id="selectWorkingHistoryByStaffId" parameterType="Integer" resultType="Boolean">
	   <![CDATA[
		   SELECT CASE
					    WHEN MAX(STARTED_AT) IS NULL THEN 1
				        WHEN TO_CHAR(MAX(STARTED_AT), 'YYYY-MM-DD') < TO_CHAR(sysdate, 'YYYY-MM-DD') THEN 1
				        ELSE 0
	        END
	 		FROM WORKING_HISTORY
	 		WHERE STAFF_ID = #{staffId}
 		 ]]>
	</select>
	

	<!-- 출근 기록 등록 -->
	<insert id="insertRecode" parameterType="Attendance" >
		INSERT INTO WORKING_HISTORY (ID, STARTED_AT, ENDED_AT, WORKING_STATUS, CREATED_AT, UPDATED_AT, COMPANY_ID, STAFF_ID)
		VALUES(SEQ_WORKING_HISTORY_ID.nextval, sysdate, null, #{workingStatus}, sysdate, sysdate, 2, #{staffId})
	</insert>
	
	
	<update id="updateRecode" parameterType="Attendance" >
		UPDATE WORKING_HISTORY
		SET ENDED_AT = sysdate, UPDATED_AT = sysdate, WORKING_STATUS = '퇴근'
		WHERE STAFF_ID = #{staffId}
		  AND WORKING_STATUS = '출근'
		  AND ENDED_AT IS NULL
		  AND TO_CHAR(STARTED_AT, 'YYYY-MM-DD') = TO_CHAR(sysdate, 'YYYY-MM-DD')
		  AND STARTED_AT = (
		      SELECT MAX(STARTED_AT)
		      FROM WORKING_HISTORY
		      WHERE STAFF_ID = #{staffId}
		        AND WORKING_STATUS = '출근'
		        AND ENDED_AT IS NULL
		        AND TO_CHAR(STARTED_AT, 'YYYY-MM-DD') = TO_CHAR(sysdate, 'YYYY-MM-DD')
		  )
	</update>
	
	
	<!-- 세션에 저장 된 아이디를 기준으로 staffId를 얻어 와서 입력된 db값 가져오기 -->
	<select id="selectStartAt" parameterType="Attendance" resultType="Attendance" >
<!-- 		SELECT wh.STARTED_AT start_at, wh.WORKING_STATUS workingStatus, s.NAME name, s."RANK" "RANK", d.NAME deptname
		FROM WORKING_HISTORY wh INNER JOIN STAFF s 
			ON wh.STAFF_ID = s.ID INNER JOIN DEPARTMENT d 
			ON s.DEPARTMENT_ID = d.ID 
		WHERE wh.STAFF_ID = #{staffId}
		AND wh.STARTED_AT = (SELECT MAX(wh2.STARTED_AT)
                       FROM WORKING_HISTORY wh2
                       WHERE wh2.STAFF_ID = wh.STAFF_ID) -->
         	SELECT * 
			FROM (
				    SELECT wh.ID historyId,
				    	   wh.STARTED_AT startAt, 
				           wh.ENDED_AT endAt,
				           wh.WORKING_STATUS workingStatus,
				           wh.COMPANY_ID companyId,
				           wh.STAFF_ID	staffId, 
				           wh.CREATED_AT createdAt, 
				           wh.UPDATED_AT updatedAt,
				           s.NAME name, 
				           s.RANK rank, 
				           d.NAME deptName
				    FROM WORKING_HISTORY wh
				    INNER JOIN STAFF s ON wh.STAFF_ID = s.ID
				    INNER JOIN DEPARTMENT d ON s.DEPARTMENT_ID = d.ID
				    WHERE wh.STAFF_ID = #{staffId}
				    ORDER BY wh.CREATED_AT DESC
				)
			WHERE ROWNUM = 1              
	</select>

	<!-- 출근 상태 조회하기 -->
	<select id="selectWorkingStatusByLoginId" parameterType="Integer" resultType="String">	
		SELECT *
		FROM (
				SELECT wh.working_status
				FROM working_history wh
					INNER JOIN staff s ON wh.staff_id = s.id
				WHERE s.id = #{staffId}
				ORDER BY wh.CREATED_AT DESC		
			 )
		WHERE ROWNUM = 1
	</select>


	<!-- 로그인 아이디로 사원 정보 조회 하기 -->
<!-- 	<select id="selectStaffInfoByLoginId" parameterType="Integer" resultType="Attendance">	
		SELECT wh.ID historyId, wh.STARTED_AT startAt, wh.ENDED_AT endAt, wh.COMPANY_ID companyId, s.NAME name, s.RANK rank, d.NAME deptName, wh.WORKING_STATUS workingStatus 
		FROM WORKING_HISTORY wh INNER JOIN STAFF s 
			ON wh.STAFF_ID = s.ID INNER JOIN DEPARTMENT d 
			ON s.DEPARTMENT_ID = d.ID 
		WHERE wh.STAFF_ID = #{staffId}
			AND wh.STARTED_AT = (SELECT MAX(wh2.STARTED_AT)
			           FROM WORKING_HISTORY wh2
			           WHERE wh2.STAFF_ID = wh.STAFF_ID)
	</select>	 -->
	
	<insert id="insertDefaultStaffIdByLoginId" parameterType="Integer">
		INSERT INTO WORKING_HISTORY (ID, CREATED_AT, UPDATED_AT, STAFF_ID, COMPANY_ID)
		VALUES (seq_WORKING_HISTORY_ID.nextval, sysdate, sysdate, #{staffId}, 2)
	</insert>
	
	
	
	
	<select id="selectStaffInfoByLoginId" parameterType="Integer" resultType="Attendance">	
		SELECT * 
		FROM (
			    SELECT wh.ID historyId,
			    	   wh.STARTED_AT startAt, 
			           wh.ENDED_AT endAt,
			           wh.WORKING_STATUS workingStatus,
			           wh.COMPANY_ID companyId,
			           wh.STAFF_ID	staffId, 
			           wh.CREATED_AT createdAt, 
			           wh.UPDATED_AT updatedAt,
			           s.NAME name, 
			           s.RANK rank, 
			           d.NAME deptName
			    FROM WORKING_HISTORY wh
			    INNER JOIN STAFF s ON wh.STAFF_ID = s.ID
			    INNER JOIN DEPARTMENT d ON s.DEPARTMENT_ID = d.ID
			    WHERE wh.STAFF_ID = #{staffId}
			    ORDER BY wh.CREATED_AT DESC
			)
		WHERE ROWNUM = 1
	</select>



</mapper>